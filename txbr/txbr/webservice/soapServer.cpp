/* soapServer.cpp
   Generated by gSOAP 2.7.17 from txbrHeader.h
   Copyright(C) 2000-2010, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif
#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapServer.cpp ver 2.7.17 2012-08-13 17:02:10 GMT")


SOAP_FMAC5 int SOAP_FMAC6 soap_serve(struct soap *soap)
{
#ifndef WITH_FASTCGI
	unsigned int k = soap->max_keep_alive;
#endif

	do
	{
#ifdef WITH_FASTCGI
		if (FCGI_Accept() < 0)
		{
			soap->error = SOAP_EOF;
			return soap_send_fault(soap);
		}
#endif

		soap_begin(soap);

#ifndef WITH_FASTCGI
		if (soap->max_keep_alive > 0 && !--k)
			soap->keep_alive = 0;
#endif

		if (soap_begin_recv(soap))
		{	if (soap->error < SOAP_STOP)
			{
#ifdef WITH_FASTCGI
				soap_send_fault(soap);
#else 
				return soap_send_fault(soap);
#endif
			}
			soap_closesock(soap);

			continue;
		}

		if (soap_envelope_begin_in(soap)
		 || soap_recv_header(soap)
		 || soap_body_begin_in(soap)
		 || soap_serve_request(soap)
		 || (soap->fserveloop && soap->fserveloop(soap)))
		{
#ifdef WITH_FASTCGI
			soap_send_fault(soap);
#else
			return soap_send_fault(soap);
#endif
		}

#ifdef WITH_FASTCGI
		soap_destroy(soap);
		soap_end(soap);
	} while (1);
#else
	} while (soap->keep_alive);
#endif
	return SOAP_OK;
}

#ifndef WITH_NOSERVEREQUEST
SOAP_FMAC5 int SOAP_FMAC6 soap_serve_request(struct soap *soap)
{
	soap_peek_element(soap);
	if (!soap_match_tag(soap, soap->tag, "txbr:runOFFTxbr"))
		return soap_serve_txbr__runOFFTxbr(soap);
	if (!soap_match_tag(soap, soap->tag, "txbr:resetOFFTxbr"))
		return soap_serve_txbr__resetOFFTxbr(soap);
	if (!soap_match_tag(soap, soap->tag, "txbr:statOFFTxbr"))
		return soap_serve_txbr__statOFFTxbr(soap);
	return soap->error = SOAP_NO_METHOD;
}
#endif

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_txbr__runOFFTxbr(struct soap *soap)
{	struct txbr__runOFFTxbr soap_tmp_txbr__runOFFTxbr;
	struct txbr__runOFFTxbrResponse soap_tmp_txbr__runOFFTxbrResponse;
	soap_default_txbr__runOFFTxbrResponse(soap, &soap_tmp_txbr__runOFFTxbrResponse);
	soap_default_txbr__runOFFTxbr(soap, &soap_tmp_txbr__runOFFTxbr);
	soap->encodingStyle = NULL;
	if (!soap_get_txbr__runOFFTxbr(soap, &soap_tmp_txbr__runOFFTxbr, "txbr:runOFFTxbr", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = txbr__runOFFTxbr(soap, soap_tmp_txbr__runOFFTxbr.fileFolderLocation, soap_tmp_txbr__runOFFTxbr.workDirectory, soap_tmp_txbr__runOFFTxbr.basename, soap_tmp_txbr__runOFFTxbr.type, soap_tmp_txbr__runOFFTxbr.scope, soap_tmp_txbr__runOFFTxbrResponse.return_val);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_txbr__runOFFTxbrResponse(soap, &soap_tmp_txbr__runOFFTxbrResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_txbr__runOFFTxbrResponse(soap, &soap_tmp_txbr__runOFFTxbrResponse, "txbr:runOFFTxbrResponse", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_txbr__runOFFTxbrResponse(soap, &soap_tmp_txbr__runOFFTxbrResponse, "txbr:runOFFTxbrResponse", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_txbr__resetOFFTxbr(struct soap *soap)
{	struct txbr__resetOFFTxbr soap_tmp_txbr__resetOFFTxbr;
	struct txbr__resetOFFTxbrResponse soap_tmp_txbr__resetOFFTxbrResponse;
	soap_default_txbr__resetOFFTxbrResponse(soap, &soap_tmp_txbr__resetOFFTxbrResponse);
	soap_default_txbr__resetOFFTxbr(soap, &soap_tmp_txbr__resetOFFTxbr);
	soap->encodingStyle = NULL;
	if (!soap_get_txbr__resetOFFTxbr(soap, &soap_tmp_txbr__resetOFFTxbr, "txbr:resetOFFTxbr", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = txbr__resetOFFTxbr(soap, soap_tmp_txbr__resetOFFTxbr.workDirectory, soap_tmp_txbr__resetOFFTxbrResponse.return_val);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_txbr__resetOFFTxbrResponse(soap, &soap_tmp_txbr__resetOFFTxbrResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_txbr__resetOFFTxbrResponse(soap, &soap_tmp_txbr__resetOFFTxbrResponse, "txbr:resetOFFTxbrResponse", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_txbr__resetOFFTxbrResponse(soap, &soap_tmp_txbr__resetOFFTxbrResponse, "txbr:resetOFFTxbrResponse", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_txbr__statOFFTxbr(struct soap *soap)
{	struct txbr__statOFFTxbr soap_tmp_txbr__statOFFTxbr;
	struct txbr__statOFFTxbrResponse soap_tmp_txbr__statOFFTxbrResponse;
	soap_default_txbr__statOFFTxbrResponse(soap, &soap_tmp_txbr__statOFFTxbrResponse);
	soap_default_txbr__statOFFTxbr(soap, &soap_tmp_txbr__statOFFTxbr);
	soap->encodingStyle = NULL;
	if (!soap_get_txbr__statOFFTxbr(soap, &soap_tmp_txbr__statOFFTxbr, "txbr:statOFFTxbr", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = txbr__statOFFTxbr(soap, soap_tmp_txbr__statOFFTxbr.workDirectory, soap_tmp_txbr__statOFFTxbrResponse.return_val);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_txbr__statOFFTxbrResponse(soap, &soap_tmp_txbr__statOFFTxbrResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_txbr__statOFFTxbrResponse(soap, &soap_tmp_txbr__statOFFTxbrResponse, "txbr:statOFFTxbrResponse", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_txbr__statOFFTxbrResponse(soap, &soap_tmp_txbr__statOFFTxbrResponse, "txbr:statOFFTxbrResponse", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of soapServer.cpp */
